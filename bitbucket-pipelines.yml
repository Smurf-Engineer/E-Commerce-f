---
# use alpine with yarn image
image: davidglez/alpine-pm2

# set docker enabled
options:
  docker: true

pipelines:
  branches:
    development:
    - step:
        script:
        # install git and verify if the desired folder has changes
        # - apt-get update && apt-get install -y unzip git
        # - if [ git diff HEAD~ --name-only|grep api ]; then echo "File does not exist"; fi
        # Installing gcloud
        - curl -o /tmp/google-cloud-sdk.tar.gz https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-161.0.0-linux-x86_64.tar.gz
        - tar -xvf /tmp/google-cloud-sdk.tar.gz -C /tmp/
        - /tmp/google-cloud-sdk/install.sh -q
        - source /tmp/google-cloud-sdk/path.bash.inc
        # Installing kubectl
        - gcloud components install kubectl -q
        # Authentication
        - echo $GCLOUD_API_KEYFILE | base64 --decode --ignore-garbage > ./gcloud-api-key.json
        - gcloud auth activate-service-account --key-file gcloud-api-key.json
        - gcloud config set project $GCLOUD_PROJECT
        - gcloud container clusters get-credentials $GCLOUD_CLUSTER --zone=$GCLOUD_ZONE
        # Building images
        - yarn --pure-lockfile
        - yarn build
        - docker build . -t us.gcr.io/$GCLOUD_PROJECT/$APP/development:$BITBUCKET_COMMIT
        # Pushing SHA1 image
        - gcloud docker -- push us.gcr.io/$GCLOUD_PROJECT/$APP/development:$BITBUCKET_COMMIT
        # Pushing latest image
        - docker tag us.gcr.io/$GCLOUD_PROJECT/$APP/development:$BITBUCKET_COMMIT us.gcr.io/$GCLOUD_PROJECT/$APP/development:latest
        - gcloud docker -- push us.gcr.io/$GCLOUD_PROJECT/$APP/development:latest
        # Deploy the image
        - kubectl set image deployment $APP $APP=us.gcr.io/$GCLOUD_PROJECT/$APP/development:$BITBUCKET_COMMIT --record --namespace=development